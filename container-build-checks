#!/bin/bash
# SPDX-FileCopyrightText: 2021 SUSE LLC
# SPDX-License-Identifier: GPL-2.0-or-later
set -euo pipefail
shopt -s nullglob

# Define functions for handling reported issues
hints=0
warnings=0
errors=0

hint() {
	printf "Hint: "
	echo "$@"
	((hints++)) || :
}

warn() {
	printf "Warning: "
	echo "$@"
	((warnings++)) || :
}

error() {
	printf "Error: "
	echo "$@"
	((errors++)) || :
}

# Find .containerinfo files
if [ "${BUILD_DIST+x}" != "x" ]; then
	# Not running in an OBS build container
	containerinfos=("$PWD"/*.containerinfo)
else
	# Running in an OBS build container
	TOPDIR=/usr/src/packages
	[ -d "${BUILD_ROOT}/.build.packages" ] && TOPDIR="/.build.packages"
	[ -L "${BUILD_ROOT}/.build.packages" ] && TOPDIR="/$(readlink ${BUILD_ROOT}/.build.packages)"
	
	containerinfos=(${BUILD_ROOT}${TOPDIR}/{DOCKER,KIWI}/*.containerinfo)
fi

buildengine=
if command -v podman &>/dev/null; then
	buildengine=podman
elif command -v docker &>/dev/null; then
	buildengine=docker
else
	echo "Neither docker nor podman present"
#	exit 1
fi

# Load configuration
VENDOR=
FATAL_WARNINGS=0

for i in /usr/share/container-build-checks/*.conf; do
	. $i
done

[ -n "$VENDOR" ] || warn "No VENDOR defined in the configuration"

# Do some setup
tmpdir="$(mktemp -d)"
trap 'cd /; rm -rf "$tmpdir"' EXIT
cd "$tmpdir"

# Finally, perform checks!
for ci in "${containerinfos[@]}"; do
	echo "Looking at $ci"
	tags=($(jq -r '.["tags"][]' <"$ci"))
	for tag in "${tags[@]}"; do
		printf "Tag: %s\n" "$tag"
	done
	printf "Release: %s\n" "$(jq -r '.["release"]' <"$ci")"

#	$buildengine load -i "$(jq -r '.["file"]' <"$ci")"
#	$buildengine image inspect "${tags[0]}"

	tarfile="$(dirname "$ci")/$(jq -r '.["file"]' <"$ci")"
	tar -xOaf "${tarfile}" manifest.json > manifest.json

	configblob="$(jq -r '.[0]["Config"]' < manifest.json)"
	tar -xOaf "${tarfile}" "$configblob" > config.json

#	jq . < config.json
done

# Checking done, show a summary and exit
ret=0
printf "container-build-checks done. Hints: %d Warnings: %d Errors: %d\n" $hints $warnings $errors
if [ "$warnings" -gt 0 ]; then
	if [ "$FATAL_WARNINGS" != 0 ]; then
		echo "Treating warnings as fatal due to project configuration."
		ret=1
	else
		echo "Warnings found, but those are only fatal in certain projects."
	fi
fi

if [ "$errors" -gt 0 ]; then
	echo "Fatal errors found."
	ret=1
fi

exit $ret
